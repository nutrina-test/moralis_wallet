
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import Moralis from 'moralis';

const initialState = {
  balance: {
    status: '',
    message: '',
    value: [
    ],
  },
};


async function getBalances(accounts) {
  const networks = [
    { network: "Binance", collection: "BscTokenBalance" },
    { network: "Ethereum", collection: "EthTokenBalance" },
    { network: "Polygon", collection: "PolygonTokenBalance" }
  ];

  const queryResults = await Promise.allSettled(networks.map(async (n) => {
    const TokenBalance = Moralis.Object.extend(n.collection);

    const queryBalances = accounts.map((account) => new Moralis.Query(TokenBalance)
      .equalTo("address", account));

    const query = Moralis.Query.or.apply(this, queryBalances);
    const result = await query.find();

    return {
      network: n.network,
      assets: result.map((tokenBalance) => {
        return {
          name: tokenBalance.get('name'),
          symbol: tokenBalance.get('symbol'),
          token_address: tokenBalance.get('token_address'),
          balance: tokenBalance.get('balance'),
          address: tokenBalance.get('address'),
          decimals: tokenBalance.get('decimals'),
        }
      })
    };
  }));
  return queryResults;
}


export const getBalancesAsync = createAsyncThunk(
  'wallet/getBalances',
  async ({ accounts }) => {
    try {
      const balances = await getBalances(accounts);
      return balances;
    } catch (error) {
      console.error("Error while getting balances:", error);
    }
  }
);
export const walletSlice = createSlice({
  name: 'wallet',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    reset: (state) => {
      console.log("geri reset state", state)
      state.balance = {
        status: '',
        message: '',
        value: [
        ],
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // getBalancesAsync
      .addCase(getBalancesAsync.pending, (state) => {
        console.log("geri state", state)
        state.balance.status = 'loading';
      })
      .addCase(getBalancesAsync.fulfilled, (state, action) => {
        state.balance.status = 'done';
        state.balance.value = action.payload || '';
      })
      .addCase(getBalancesAsync.rejected, (state, action) => {
        state.balance.status = 'failed';
        state.balance.message = action.error.message;
      })
  },
});


export const selectBalance = (state) => {
  return state.wallet.balance;
}

export const { reset } = walletSlice.actions;

export default walletSlice.reducer;
